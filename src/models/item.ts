import { ItemCombinationType } from './item-combination'

export enum ItemType {
  bfSword,
  giantsBelt,
  chainVest,
  largeRod,
  negatronCloak,
  recurveBow,
  spatula,
  sparringGloves,
  tear,
  berserkersAxe,
  botrk,
  bloodthirster,
  brambleVest,
  deathblade,
  dragonsClaw,
  forceOfNature,
  frozenHeart,
  frozenMallet,
  giantslayer,
  guardianAngel,
  rageblade,
  handOfJustice,
  hextechGunblade,
  hush,
  iceborneGauntlet,
  infernoCinder,
  infinityEdge,
  ionicSpark,
  jeweledGauntlet,
  lastWhisper,
  locket,
  ludensEcho,
  magesCap,
  morellonomicon,
  quicksilver,
  rapidFirecannon,
  redBuff,
  redemption,
  runaansHurricane,
  seraphsEmbrace,
  spearOfShojin,
  statikkShiv,
  swordbreaker,
  talismanOfLight,
  thiefsGloves,
  titanicHydra,
  titansResolve,
  trapClaw,
  wardensMail,
  warmog,
  ghostblade,
  zekesHerald,
  zephyr,
  __length,
}

const itemTypeToStringLut: Map<ItemType, string> = new Map([
  [ItemType.bfSword, 'BF Sword'],
  [ItemType.chainVest, 'Chain Vest'],
  [ItemType.giantsBelt, "Giant's Belt"],
  [ItemType.largeRod, 'Needlessly Large Rod'],
  [ItemType.negatronCloak, 'Negatron Cloud'],
  [ItemType.recurveBow, 'Recurve Bow'],
  [ItemType.spatula, 'Spatula'],
  [ItemType.sparringGloves, 'Sparring Gloves'],
  [ItemType.tear, 'Tear'],
  [ItemType.berserkersAxe, "Berserker's Axe"],
  [ItemType.botrk, 'Blade of the Ruined King'],
  [ItemType.bloodthirster, 'Bloodthirster'],
  [ItemType.brambleVest, 'Bramble Vest'],
  [ItemType.deathblade, 'Deathblade'],
  [ItemType.dragonsClaw, "Dragon's Claw"],
  [ItemType.forceOfNature, 'Force of Nature'],
  [ItemType.frozenHeart, 'Frozen Heart'],
  [ItemType.frozenMallet, 'Frozen Mallet'],
  [ItemType.giantslayer, 'Giantslayer'],
  [ItemType.guardianAngel, 'Guardian Angel'],
  [ItemType.rageblade, "Guinsoo's Rageblade"],
  [ItemType.handOfJustice, 'Hand of Justice'],
  [ItemType.hextechGunblade, 'Hextech Gunblade'],
  [ItemType.hush, 'Hush'],
  [ItemType.iceborneGauntlet, 'Iceborne Gauntlet'],
  [ItemType.infernoCinder, 'Inferno Cinder'],
  [ItemType.infinityEdge, 'Infinity Edge'],
  [ItemType.ionicSpark, 'Ionic Spark'],
  [ItemType.jeweledGauntlet, 'Jeweled Gauntlet'],
  [ItemType.lastWhisper, 'Last Whisper'],
  [ItemType.locket, 'Locket of the Iron Solari'],
  [ItemType.ludensEcho, "Ludens's Echo"],
  [ItemType.magesCap, "Mage's cap"],
  [ItemType.morellonomicon, 'Morellonomicon'],
  [ItemType.quicksilver, 'Quicksilver'],
  [ItemType.magesCap, "Mage's Cap"],
  [ItemType.rapidFirecannon, 'Rapid Firecannon'],
  [ItemType.redBuff, 'Red Buff'],
  [ItemType.redemption, 'Redemption'],
  [ItemType.runaansHurricane, 'Runaans Hurricane'],
  [ItemType.seraphsEmbrace, "Seraph's Embrace"],
  [ItemType.spearOfShojin, 'Spear of Shojin'],
  [ItemType.statikkShiv, 'Statikk Shiv'],
  [ItemType.swordbreaker, 'Swordbreaker'],
  [ItemType.talismanOfLight, 'Talisman of Light'],
  [ItemType.thiefsGloves, "Thief's Gloves"],
  [ItemType.titanicHydra, 'Titanic Hydra'],
  [ItemType.titansResolve, "Titan's Resolve"],
  [ItemType.trapClaw, 'Trap Claw'],
  [ItemType.wardensMail, "Warden's Mail"],
  [ItemType.warmog, "Warmog's Armor"],
  [ItemType.ghostblade, "Youmuu's Ghostblade"],
  [ItemType.zekesHerald, "Zeke's Herald"],
  [ItemType.zephyr, 'Zephyr'],
])

export const itemTypeToString = (type: ItemType): string => {
  const result = itemTypeToStringLut.get(type)
  if (!result) {
    throw new Error(`Couldn't find conversion from ItemType to string for ${type}`)
  }
  return result
}

export type Item = {
  id: string
  displayName: string
  image: string
  type: ItemType
  combinationType: ItemCombinationType
}
